name: Release Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

permissions:
  contents: write

jobs:
  tag-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: v${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          git fetch --tags
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG"
          git push origin "$TAG"

  build-and-release:
    runs-on: ubuntu-latest
    needs: tag-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npx pnpm install

      - name: Build project
        run: npx pnpm run build

      - name: Prepare release file name
        id: prep
        run: |
          VERSION=${{ needs.tag-version.outputs.version }}
          DATE=$(date +'%Y%m%d')
          ZIPNAME="har-collector-extension-${VERSION}-${DATE}.zip"
          echo "zipname=$ZIPNAME" >> $GITHUB_OUTPUT

      - name: Archive dist folder
        run: |
          cd dist
          zip -r "../${{ steps.prep.outputs.zipname }}" .
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag-version.outputs.tag }}
          files: ${{ steps.prep.outputs.zipname }}
          body_path: README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
